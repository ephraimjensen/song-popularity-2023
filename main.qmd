---
title: "Spotify Data Analysis"
author: "Ephraim Jensen"
date: "2024-07-10"
format: html
---

# Spotify most popular songs of 2024 as of Mid-June



```{python}
import pandas as pd 
import numpy as np
import plotly_express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

from sklearn.model_selection import train_test_split
from sklearn import tree
# from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
# from sklearn.ensemble import GradientBoostingClassifier
# from sklearn.svm import SVC
from sklearn import metrics
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score
from datetime import datetime

pd.options.mode.copy_on_write = True
```

```{python}
musicdf = pd.read_csv("spotify2023.csv", encoding="ISO-8859-1")
musicdf.head(300)

```


```{python}
# Eliminate bad values
# len(musicdf)
def to_int(string_integer):
    return int(string_integer)
musicdf = musicdf.loc[musicdf["streams"] != "BPM110KeyAModeMajorDanceability53Valence75Energy69Acousticness7Instrumentalness0Liveness17Speechiness3"]
musicdf["streams"] = musicdf["streams"].apply(to_int)

```


```{python}


# musicdf = musicdf.drop(dropthese, axis=0)
# unique_genres = musicdf["genre"].unique()

# condition = musicdf.loc[musicdf["genre"] == "indie"]
f_musicdf = musicdf.filter(["track_name", "artist(s)_name", "artist_count", "streams", "in_spotify_charts", "released_year", "released_month", "released_day"])



display(f_musicdf)


```


```{python}
# Deal with Na values
# # select all rows with nan values
# rows_with_na = f_musicdf[f_musicdf.isna().any(axis=1)]
# # display(rows_with_na)

# #select all rows with nan in track or artist\
# tadf = f_musicdf.filter(["Track", "Artist"])

# important_na = tadf[tadf.isna().any(axis=1)]
# print(important_na)
# # (display(musicdf.drop(important_na)))

# na2 = f_musicdf.loc[f_musicdf.isna().any(axis=1)]
# display(na2)

```

```{python}
# Deal with Na values
# # # # genre_popularitydf = musicdf.filter(["name" , "genre", "popularity"])
# # # # genre_popularitydf.sort_values(by="popularity", ascending=False)
# # # for column in f_musicdf.columns:
# # #     rows_with_na_in_f_corr = f_musicdf[f_musicdf[column].isna()]
# # #     print(rows_with_na_in_f_corr.count())

# Loop through each column and count rows with NaN values
for column in f_musicdf.columns:
    rows_with_na = f_musicdf[f_musicdf[column].isna()]
    count_na = rows_with_na.shape[0]  # Count the number of rows with NaN values
    print(f"Column '{column}' has {count_na} rows with NaN values:")
    # print(rows_with_na)
    print()

# print(f_musicdf.count())
f_musicdf = f_musicdf.dropna()
# print(f_musicdf.count())
```

```{python}

# number of days since release
# Function to calculate the difference in days
def days_difference(year, month, day):
    # Create the release date
    release_date = datetime(year, month, day)
    # Create the target date (January 1, 2024)
    target_date = datetime(2024, 1, 1)
    # Calculate the difference in days
    difference = (target_date - release_date).days
    return difference

f_musicdf["days_released"] = f_musicdf.apply(lambda row: days_difference(row["released_year"], row["released_month"], row["released_day"]), axis=1)

# f_musicdf = f_musicdf.drop(f_musicdf.filter(["released_year", "released_month", "released_day"]))
f_musicdf = f_musicdf.drop(columns= ["released_year", "released_month", "released_day"])
```

```{python}


display(f_musicdf)
```

# does number of artists have an effect on spotify chart rankings?

```{python}
def to_int(string_integer):
    return int(string_integer)


# one_artist
one_artist = f_musicdf.loc[f_musicdf["artist_count"] == 1]
display(one_artist)
one_artist["streams"] = one_artist["streams"].apply(to_int)
avg_stream_count_solo = one_artist["streams"].mean()

# # more than 1 artist
multiple_artist = f_musicdf.loc[f_musicdf["artist_count"] != 1]
display(multiple_artist)
multiple_artist["streams"] = multiple_artist["streams"].apply(to_int)
avg_stream_count_collab = multiple_artist["streams"].mean()

print(f"solo: {avg_stream_count_solo}\ncollab: {avg_stream_count_collab}")
```

```{python}
# 586
in_charts_solo = one_artist.loc[one_artist["in_spotify_charts"] != 0].sort_values(by="in_spotify_charts")
in_charts_collab = multiple_artist.loc[multiple_artist["in_spotify_charts"] != 0].sort_values(by="in_spotify_charts")

# in_charts.sort_values(by="in_spotify_charts")
display(in_charts_solo)
display(in_charts_collab)


top50solo = in_charts_solo.loc[in_charts_solo["in_spotify_charts"] <= 50]
top50collab = in_charts_collab.loc[in_charts_collab["in_spotify_charts"] <= 50]

display(top50solo)
display(top50collab)

top10solo = in_charts_solo.loc[in_charts_solo["in_spotify_charts"] <= 10]
top10collab = in_charts_collab.loc[in_charts_collab["in_spotify_charts"] <= 10]

display(top10solo)
display(top10collab)

top1solo = in_charts_solo.loc[in_charts_solo["in_spotify_charts"] <= 1]
top1collab = in_charts_collab.loc[in_charts_collab["in_spotify_charts"] <= 1]

display(top1solo)
display(top1collab)
```

```{python}

data={

    "index": ["Total Population<br>(n=952)",
        # "On the Charts", 
        "Reached Top 50 on Spotify Charts<br>(n=502)", 
        # "Top 10", 
        "Reached Top 1 on Spotify Charts<br>(n=16)", 
        ],

    "Solo": [ 
        len(one_artist) / (len(one_artist) + len(multiple_artist)),
        # len(in_charts_solo) / (len(in_charts_solo) + len(in_charts_collab)), 
        len(top50solo) / (len(top50solo) + len(top50collab)), 
        # len(top10solo) / (len(top10solo) + len(top10collab)), 
        len(top1solo) / (len(top1solo) + len(top1collab)), 
        ],
        
    "Collab": [ 
        len(multiple_artist) / (len(one_artist) + len(multiple_artist)),
        # len(in_charts_collab) / (len(in_charts_solo) + len(in_charts_collab)), 
        len(top50collab) / (len(top50solo) + len(top50collab)), 
        # len(top10collab) / (len(top10solo) + len(top10collab)), 
        len(top1collab) / (len(top1solo) + len(top1collab)), 
        ]

}

chartsdf = pd.DataFrame(data)
chartsdf["Collab"] = chartsdf["Collab"].round(4)
chartsdf["Solo"] = chartsdf["Solo"].round(4)
# display(chartsdf)

# chartsdf2 = pd.DataFrame(data2, index=[0])


# Melt the DataFrame to long format for Plotly Express
chartsdf_long = pd.melt(chartsdf, id_vars=["index"], var_name="chart_type", value_name="counts")

# Create a bar plot with multiple bars
fig = px.bar(chartsdf_long, x="index", y="counts", color="chart_type",
             barmode="group", # "group" for grouped bars, "overlay" for overlaid bars
             text="counts",
             labels={
                "index": "Sample Group", 
                "counts": "Representation", 
                "chart_type": "Type of Song",
                },
            title="Percentage of Solo vs. Collaboration Songs<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Across Population, Reached Top 50 on Spotify Charts, and Reached Top 1 on Spotify Charts"
             )
# fig.add_annotation

# Show the plot
fig.show()


```



__There is no significant difference between the chart rankings of songs that have a single artist and a song made my multiple artists.__
<!-- 
# does dancability have an effect on spotify chart rankings?

```{python}


musicdf = musicdf.sort_values(by="streams")

average_dancability = musicdf["danceability_%"].sum() / len(musicdf["danceability_%"])

# fig = px.scatter(musicdf,
#     x="danceability_%",
#     y="streams",
#     color="energy_%"
# )

# # Melt the DataFrame to long format for Plotly Express
# chartsdf_long = pd.melt(musicdf.filter["danceability_%", "streams", "energy_%", ""], id_vars=["index"], var_name="chart_type", value_name="counts")

# # Create a bar plot with multiple bars
# fig = px.bar(chartsdf_long, x="index", y="counts", color="chart_type",
#              barmode="group", # "group" for grouped bars, "overlay" for overlaid bars
#              text="counts",
#              labels={
#                 "index": "Sample Group", 
#                 "counts": "Representation", 
#                 "chart_type": "Type of Song",
#                 },

fig = px.scatter(musicdf,
    x="danceability_%",
    # color="streams",
    y="streams",
    # y="energy_%",
    # size="streams",
    # color_continuous_scale=px.colors.sequential.Bluered,
    color_continuous_scale=['rgb(200,20,20)', 'rgb(0,0,255)'],
    # color_continuous_scale="plasma_r",

    # color_continuous_scale="thermal_r",

)
fig.add_vline(x=average_dancability)

# 'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',
#              'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',
#              'ylorrd'

fig.update_traces(marker=dict(opacity=.45, line=dict(width=0)))#size=35,symbol="square",
fig.update_xaxes(range=[0, 100])
fig.show()

```

```{python}
def clean_and_convert(entry):
    if pd.isna(entry):
        return float('nan')
    try:
        # Remove commas and any other non-numeric characters
        cleaned_entry = ''.join(c for c in str(entry) if c.isdigit() or c == '.')
        return float(cleaned_entry)
    except ValueError:
        return float('nan')

# top50 = pd.concat([top50solo, top50collab], ignore_index=True)
# musicdf['in_deezer_charts'] = musicdf['in_deezer_charts'].str.replace(',', '').astype(float)
# musicdf['in_deezer_charts'] = musicdf['in_deezer_charts'].apply(lambda x: float(str(x).replace(',', '')))

# musicdf['in_deezer_charts'] = musicdf['in_deezer_charts'].apply(clean_and_convert)
# musicdf['in_deezer_charts'] = musicdf['in_deezer_charts'].apply(lambda x: float(str(x).replace(',', '')))
# replace(',', '').

alltop50 = musicdf.loc[musicdf["in_spotify_charts"] != 0 ]
alltop50 = alltop50.loc[musicdf["in_spotify_charts"] <= 50]
alltop50 = alltop50.loc[musicdf["in_shazam_charts"] != 0]

corrdf = alltop50.filter(['artist_count', 'released_year',
       'released_month', 'released_day', 'in_spotify_playlists',
       'in_spotify_charts', 'streams', 'in_apple_playlists', 'in_apple_charts','bpm', 'danceability_%', 'valence_%', 'energy_%',
       'acousticness_%', 'instrumentalness_%', 'liveness_%', 'speechiness_%', "days_released"]) #.apply(clean_and_convert)#lambda x: float(str(x).replace(',', '')))#.astype(float)
# corrdf = musicdf.filter(['artist_count', 'released_year',
#        'released_month', 'released_day', 'in_spotify_playlists',
#        'in_spotify_charts', 'streams', 'bpm', 'danceability_%', 'valence_%', 'energy_%',
#        'acousticness_%', 'instrumentalness_%', 'liveness_%', 'speechiness_%']).astype(float)
# corrdf = musicdf.drop(musicdf.filter(regex = 'key|artist\(s\)_name|track_name').columns, axis = 1)

# columns_to_clean = ['streams', 'in_deezer_charts']
# for column in columns_to_clean:
#     corrdf[column] = corrdf[column].apply(clean_and_convert)

corr_matrix = corrdf.corr()

# Create a heatmap using Plotly Express
fig = px.imshow(corr_matrix,
                labels=dict(color='Correlation', text="Correlation"),
                x=corr_matrix.index,
                y=corr_matrix.columns,
                color_continuous_scale='Reds')

# Customize layout
fig.update_layout(title='Correlation Matrix Heatmap')

# Show plot
fig.show()

``` -->

# Can I predict if a song has more than 500 Million Streams

```{python}
from sklearn.metrics import accuracy_score
import pandas as pd 
# import numpy as np 
# import plotly_express as px
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

n = 75  # For example, the 75th percentile
nth_percentile = np.percentile(musicdf.streams, n)

musicdf["top_25_percent"] = musicdf["streams"].apply(lambda x: 0 if x<500000000 else 1)

target_name = "top_25_percent"
chosen_features = ['in_spotify_playlists', 'in_spotify_charts', 'released_year', 'liveness_%', 'in_apple_charts']

X_pred = musicdf[chosen_features]
y_pred = musicdf.filter(regex = target_name)
X_train, X_test, y_train, y_test = train_test_split(X_pred, y_pred, test_size=0.25, random_state=42)
# Ensure y_train is 1-dimensional
y_train = y_train.values.ravel()
y_test = y_test.values.ravel()

rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)
rf_clf.fit(X_train, y_train)
y_pred = rf_clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

print(f"With these features, accuracy was: {accuracy}")
```